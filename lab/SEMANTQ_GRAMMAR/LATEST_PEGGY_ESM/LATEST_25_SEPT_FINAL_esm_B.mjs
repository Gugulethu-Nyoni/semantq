// @generated by Peggy 5.0.6.
//
// https://peggyjs.org/


class peg$SyntaxError extends SyntaxError {
  constructor(message, expected, found, location) {
    super(message);
    this.expected = expected;
    this.found = found;
    this.location = location;
    this.name = "SyntaxError";
  }

  format(sources) {
    let str = "Error: " + this.message;
    if (this.location) {
      let src = null;
      const st = sources.find(s => s.source === this.location.source);
      if (st) {
        src = st.text.split(/\r\n|\n|\r/g);
      }
      const s = this.location.start;
      const offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
        ? this.location.source.offset(s)
        : s;
      const loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
      if (src) {
        const e = this.location.end;
        const filler = "".padEnd(offset_s.line.toString().length, " ");
        const line = src[s.line - 1];
        const last = s.line === e.line ? e.column : line.length + 1;
        const hatLen = (last - s.column) || 1;
        str += "\n --> " + loc + "\n"
            + filler + " |\n"
            + offset_s.line + " | " + line + "\n"
            + filler + " | " + "".padEnd(s.column - 1, " ")
            + "".padEnd(hatLen, "^");
      } else {
        str += "\n at " + loc;
      }
    }
    return str;
  }

  static buildMessage(expected, found) {
    function hex(ch) {
      return ch.codePointAt(0).toString(16).toUpperCase();
    }

    const nonPrintable = Object.prototype.hasOwnProperty.call(RegExp.prototype, "unicode")
      ? new RegExp("[\\p{C}\\p{Mn}\\p{Mc}]", "gu")
      : null;
    function unicodeEscape(s) {
      if (nonPrintable) {
        return s.replace(nonPrintable,  ch => "\\u{" + hex(ch) + "}");
      }
      return s;
    }

    function literalEscape(s) {
      return unicodeEscape(s
        .replace(/\\/g, "\\\\")
        .replace(/"/g,  "\\\"")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,          ch => "\\x0" + hex(ch))
        .replace(/[\x10-\x1F\x7F-\x9F]/g, ch => "\\x"  + hex(ch)));
    }

    function classEscape(s) {
      return unicodeEscape(s
        .replace(/\\/g, "\\\\")
        .replace(/\]/g, "\\]")
        .replace(/\^/g, "\\^")
        .replace(/-/g,  "\\-")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,          ch => "\\x0" + hex(ch))
        .replace(/[\x10-\x1F\x7F-\x9F]/g, ch => "\\x"  + hex(ch)));
    }

    const DESCRIBE_EXPECTATION_FNS = {
      literal(expectation) {
        return "\"" + literalEscape(expectation.text) + "\"";
      },

      class(expectation) {
        const escapedParts = expectation.parts.map(
          part => (Array.isArray(part)
            ? classEscape(part[0]) + "-" + classEscape(part[1])
            : classEscape(part))
        );

        return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]" + (expectation.unicode ? "u" : "");
      },

      any() {
        return "any character";
      },

      end() {
        return "end of input";
      },

      other(expectation) {
        return expectation.description;
      },
    };

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      const descriptions = expected.map(describeExpectation);
      descriptions.sort();

      if (descriptions.length > 0) {
        let j = 1;
        for (let i = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  }
}

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  const peg$FAILED = {};
  const peg$source = options.grammarSource;

  const peg$startRuleFunctions = {
    start: peg$parsestart,
  };
  let peg$startRuleFunction = peg$parsestart;

  const peg$c0 = "@if(";
  const peg$c1 = "@each(";
  const peg$c2 = "@else";
  const peg$c3 = "@endif";
  const peg$c4 = "@endeach";
  const peg$c5 = "<!--";
  const peg$c6 = "-->";
  const peg$c7 = "<";
  const peg$c8 = ">";
  const peg$c9 = "</";
  const peg$c10 = "/>";
  const peg$c11 = "pre";
  const peg$c12 = "</pre>";
  const peg$c13 = "code";
  const peg$c14 = "</code>";
  const peg$c15 = "=";
  const peg$c16 = "bind:";
  const peg$c17 = "{";
  const peg$c18 = "}";
  const peg$c19 = "@";
  const peg$c20 = "\"";
  const peg$c21 = "(";
  const peg$c22 = ")";
  const peg$c23 = ",";
  const peg$c24 = "+=";
  const peg$c25 = "-=";
  const peg$c26 = "*=";
  const peg$c27 = "/=";
  const peg$c28 = "%=";
  const peg$c29 = "<<=";
  const peg$c30 = ">>=";
  const peg$c31 = ">>>=";
  const peg$c32 = "|=";
  const peg$c33 = "^=";
  const peg$c34 = "&=";
  const peg$c35 = "=>";
  const peg$c36 = ";";
  const peg$c37 = "function";
  const peg$c38 = "@if";
  const peg$c39 = "?";
  const peg$c40 = ":";
  const peg$c41 = "||";
  const peg$c42 = "??";
  const peg$c43 = "&&";
  const peg$c44 = ">>>";
  const peg$c45 = "<<";
  const peg$c46 = ">>";
  const peg$c47 = "===";
  const peg$c48 = "!==";
  const peg$c49 = "!=";
  const peg$c50 = "==";
  const peg$c51 = "<=";
  const peg$c52 = ">=";
  const peg$c53 = "++";
  const peg$c54 = "--";
  const peg$c55 = "[";
  const peg$c56 = "]";
  const peg$c57 = ".";
  const peg$c58 = "?.";
  const peg$c59 = "typeof";
  const peg$c60 = "void";
  const peg$c61 = "delete";
  const peg$c62 = "'";
  const peg$c63 = "true";
  const peg$c64 = "false";
  const peg$c65 = "null";
  const peg$c66 = "undefined";
  const peg$c67 = "@each";
  const peg$c68 = "as";

  const peg$r0 = /^[ \r\t\n]/;
  const peg$r1 = /^[<{]/;
  const peg$r2 = /^[^@<{]/;
  const peg$r3 = /^[^@<{\n]/;
  const peg$r4 = /^[a-zA-Z0-9]/;
  const peg$r5 = /^[a-zA-Z_$]/;
  const peg$r6 = /^[a-zA-Z_0-9\-:]/;
  const peg$r7 = /^[a-zA-Z_\-]/;
  const peg$r8 = /^[^"]/;
  const peg$r9 = /^[a-zA-Z_0-9]/;
  const peg$r10 = /^[^@{}\n<]/;
  const peg$r11 = /^[&\^|]/;
  const peg$r12 = /^[<>]/;
  const peg$r13 = /^[+\-]/;
  const peg$r14 = /^[%*\/]/;
  const peg$r15 = /^[!+\-~]/;
  const peg$r16 = /^[0-9]/;
  const peg$r17 = /^[^']/;
  const peg$r18 = /^[a-zA-Z_]/;
  const peg$r19 = /^[a-zA-Z0-9_]/;

  const peg$e0 = peg$classExpectation([" ", "\r", "\t", "\n"], false, false, false);
  const peg$e1 = peg$otherExpectation("required whitespace");
  const peg$e2 = peg$literalExpectation("@if(", false);
  const peg$e3 = peg$literalExpectation("@each(", false);
  const peg$e4 = peg$literalExpectation("@else", false);
  const peg$e5 = peg$literalExpectation("@endif", false);
  const peg$e6 = peg$literalExpectation("@endeach", false);
  const peg$e7 = peg$classExpectation(["<", "{"], false, false, false);
  const peg$e8 = peg$classExpectation(["@", "<", "{"], true, false, false);
  const peg$e9 = peg$classExpectation(["@", "<", "{", "\n"], true, false, false);
  const peg$e10 = peg$literalExpectation("<!--", false);
  const peg$e11 = peg$literalExpectation("-->", false);
  const peg$e12 = peg$anyExpectation();
  const peg$e13 = peg$literalExpectation("<", false);
  const peg$e14 = peg$literalExpectation(">", false);
  const peg$e15 = peg$literalExpectation("</", false);
  const peg$e16 = peg$literalExpectation("/>", false);
  const peg$e17 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"]], false, false, false);
  const peg$e18 = peg$otherExpectation("pre block");
  const peg$e19 = peg$literalExpectation("pre", false);
  const peg$e20 = peg$literalExpectation("</pre>", false);
  const peg$e21 = peg$otherExpectation("code block");
  const peg$e22 = peg$literalExpectation("code", false);
  const peg$e23 = peg$literalExpectation("</code>", false);
  const peg$e24 = peg$literalExpectation("=", false);
  const peg$e25 = peg$otherExpectation("two-way binding attribute");
  const peg$e26 = peg$literalExpectation("bind:", false);
  const peg$e27 = peg$literalExpectation("{", false);
  const peg$e28 = peg$literalExpectation("}", false);
  const peg$e29 = peg$classExpectation([["a", "z"], ["A", "Z"], "_", "$"], false, false, false);
  const peg$e30 = peg$classExpectation([["a", "z"], ["A", "Z"], "_", ["0", "9"], "-", ":"], false, false, false);
  const peg$e31 = peg$literalExpectation("@", false);
  const peg$e32 = peg$classExpectation([["a", "z"], ["A", "Z"], "_", "-"], false, false, false);
  const peg$e33 = peg$literalExpectation("\"", false);
  const peg$e34 = peg$classExpectation(["\""], true, false, false);
  const peg$e35 = peg$literalExpectation("(", false);
  const peg$e36 = peg$literalExpectation(")", false);
  const peg$e37 = peg$literalExpectation(",", false);
  const peg$e38 = peg$classExpectation([["a", "z"], ["A", "Z"], "_", ["0", "9"]], false, false, false);
  const peg$e39 = peg$literalExpectation("+=", false);
  const peg$e40 = peg$literalExpectation("-=", false);
  const peg$e41 = peg$literalExpectation("*=", false);
  const peg$e42 = peg$literalExpectation("/=", false);
  const peg$e43 = peg$literalExpectation("%=", false);
  const peg$e44 = peg$literalExpectation("<<=", false);
  const peg$e45 = peg$literalExpectation(">>=", false);
  const peg$e46 = peg$literalExpectation(">>>=", false);
  const peg$e47 = peg$literalExpectation("|=", false);
  const peg$e48 = peg$literalExpectation("^=", false);
  const peg$e49 = peg$literalExpectation("&=", false);
  const peg$e50 = peg$literalExpectation("=>", false);
  const peg$e51 = peg$otherExpectation("arrow function attribute value");
  const peg$e52 = peg$literalExpectation(";", false);
  const peg$e53 = peg$literalExpectation("function", false);
  const peg$e54 = peg$literalExpectation("@if", false);
  const peg$e55 = peg$classExpectation(["@", "{", "}", "\n", "<"], true, false, false);
  const peg$e56 = peg$literalExpectation("?", false);
  const peg$e57 = peg$literalExpectation(":", false);
  const peg$e58 = peg$literalExpectation("||", false);
  const peg$e59 = peg$literalExpectation("??", false);
  const peg$e60 = peg$literalExpectation("&&", false);
  const peg$e61 = peg$literalExpectation(">>>", false);
  const peg$e62 = peg$classExpectation(["&", "^", "|"], false, false, false);
  const peg$e63 = peg$literalExpectation("<<", false);
  const peg$e64 = peg$literalExpectation(">>", false);
  const peg$e65 = peg$literalExpectation("===", false);
  const peg$e66 = peg$literalExpectation("!==", false);
  const peg$e67 = peg$literalExpectation("!=", false);
  const peg$e68 = peg$literalExpectation("==", false);
  const peg$e69 = peg$literalExpectation("<=", false);
  const peg$e70 = peg$literalExpectation(">=", false);
  const peg$e71 = peg$classExpectation(["<", ">"], false, false, false);
  const peg$e72 = peg$classExpectation(["+", "-"], false, false, false);
  const peg$e73 = peg$classExpectation(["%", "*", "/"], false, false, false);
  const peg$e74 = peg$literalExpectation("++", false);
  const peg$e75 = peg$literalExpectation("--", false);
  const peg$e76 = peg$literalExpectation("[", false);
  const peg$e77 = peg$literalExpectation("]", false);
  const peg$e78 = peg$literalExpectation(".", false);
  const peg$e79 = peg$literalExpectation("?.", false);
  const peg$e80 = peg$classExpectation(["!", "+", "-", "~"], false, false, false);
  const peg$e81 = peg$literalExpectation("typeof", false);
  const peg$e82 = peg$literalExpectation("void", false);
  const peg$e83 = peg$literalExpectation("delete", false);
  const peg$e84 = peg$classExpectation([["0", "9"]], false, false, false);
  const peg$e85 = peg$literalExpectation("'", false);
  const peg$e86 = peg$classExpectation(["'"], true, false, false);
  const peg$e87 = peg$literalExpectation("true", false);
  const peg$e88 = peg$literalExpectation("false", false);
  const peg$e89 = peg$literalExpectation("null", false);
  const peg$e90 = peg$literalExpectation("undefined", false);
  const peg$e91 = peg$classExpectation([["a", "z"], ["A", "Z"], "_"], false, false, false);
  const peg$e92 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_"], false, false, false);
  const peg$e93 = peg$literalExpectation("@each", false);
  const peg$e94 = peg$literalExpectation("as", false);

  function peg$f0(text) {
    if (text.trim().length === 0) return null;
    
    return {
     type: 'TextNode',
     value: text,
     raw: text,
     start: location().start.offset,
     end: location().end.offset,
     loc: {
      start: location().start,
      end: location().end
     }
    };
  }
  function peg$f1(text) {
    if (text.trim().length === 0) return null;
    
    return {
      type: 'TextNode',
      value: text,
      raw: text,
      start: location().start.offset,
      end: location().end.offset
    };
  }
  function peg$f2(content) {
    return {
      type: 'CommentBlock',
      content: content
    };
  }
  function peg$f3(fragment) {
    const children = (fragment.type === "Fragment") ? fragment.children : [fragment];
    const start = fragment.start !== undefined ? fragment.start : (children.length > 0 ? children[0].start : undefined);
    const end = fragment.end !== undefined ? fragment.end : (children.length > 0 ? children[children.length - 1].end : undefined);

    return {
      html: {
        start: start,
        end: end,
        type: "Fragment",
        children: children
      }
    };
  }
  function peg$f4(fragments) {
    const validFragments = fragments.filter(x => x !== null && x !== undefined);
    
    if (validFragments.length === 1) return validFragments[0];
    
    const start = validFragments[0]?.start;
    const end = validFragments[validFragments.length - 1]?.end;
    
    return createNode('Fragment', start, end, {
      children: validFragments
    });
  }
  function peg$f5(rawHtml) {    return rawHtml;  }
  function peg$f6(openTag, innerContent, closeTag) {
    const children = innerContent ? (innerContent.type === 'Fragment' ? innerContent.children : [innerContent]) : [];
    return createElement(openTag.start, closeTag.end, openTag.name, openTag.attributes, children);
  }
  function peg$f7(openTag) {
    return createSelfClosingElement(openTag.start, openTag.end, openTag.name, openTag.attributes, []);
  }
  function peg$f8(tagName, attributes) {
    return { start: location().start.offset, end: location().end.offset, name: tagName, attributes };
  }
  function peg$f9(tagName) {
    return { start: location().start.offset, end: location().end.offset, name: tagName };
  }
  function peg$f10(tagName, attributes) {
    return { 
      start: location().start.offset, 
      end: location().end.offset, 
      name: tagName, 
      attributes: attributes || [] 
    };
  }
  function peg$f11(name) {    return name;  }
  function peg$f12(attributes, content) {
    const loc = location();
    return {
      type: "RawHTMLBlock",
      name: "pre",
      attributes: attributes || [],
      content: content,
      start: loc.start.offset,
      end: loc.end.offset
    };
  }
  function peg$f13(attributes, content) {
    const loc = location();
    return {
      type: "RawHTMLBlock",
      name: "code",
      attributes: attributes || [],
      content: content,
      start: loc.start.offset,
      end: loc.end.offset
    };
  }
  function peg$f14(head, tail) {
    return [head, ...tail.map(t => t[1])];
  }
  function peg$f15(name, value) {
    return {
        type: "EventHandler",
        start: location().start.offset,
        end: location().end.offset,
        name: name.name,
        modifiers: name.modifiers,
        expression: value.expression
    };
  }
  function peg$f16(propertyName, value) {
    if (value.type !== "MustacheAttribute") {
        error("Two-way binding ('bind:') attributes must have a mustache expression value (e.g., {variable}).");
    }
    return {
      start: location().start.offset,
      end: location().end.offset,
      type: "TwoWayBindingAttribute",
      name: propertyName.name,
      expression: value.expression
    };
  }
  function peg$f17(name, expr) {
    return {
      start: location().start.offset,
      end: location().end.offset,
      type: "MustacheAttribute",
      name: name.name,
      expression: expr
    };
  }
  function peg$f18(name, value) {
    return {
      start: location().start.offset,
      end: location().end.offset,
      type: "KeyValueAttribute",
      name: name.name,
      value: [value]
    };
  }
  function peg$f19(name) {
    return {
      start: location().start.offset,
      end: location().end.offset,
      type: "MustacheAttribute",
      name: name.name,
      expression: name
    };
  }
  function peg$f20(name) {
    return {
      start: location().start.offset,
      end: location().end.offset,
      type: "BooleanAttribute",
      name: name.name,
      value: true
    };
  }
  function peg$f21(name) {
    return {
      type: "Identifier",
      start: location().start.offset,
      end: location().end.offset,
      name: name
    };
  }
  function peg$f22(name) {
    return {
      start: location().start.offset,
      end: location().end.offset,
      type: "EventHandler",
      name: name,
      modifiers: []
    };
  }
  function peg$f23(expr) {
    return {
      start: location().start.offset,
      end: location().end.offset,
      type: "MustacheAttribute",
      expression: expr
    };
  }
  function peg$f24(value) {
    return {
      start: location().start.offset + 1,
      end: location().end.offset - 1,
      type: "Text",
      raw: value,
      data: value
    };
  }
  function peg$f25(name, params) {
    return {
        start: location().start.offset,
        end: location().end.offset,
        type: "MustacheAttributeValueWithParams",
        name: name,
        modifiers: [],
        expression: {
            type: "CallExpression",
            start: location().start.offset,
            end: location().end.offset,
            callee: name,
            arguments: params || [],
            optional: false
        }
    };
  }
  function peg$f26(param) {
    return {
      type: "Identifier",
      start: location().start.offset,
      end: location().end.offset,
      loc: {
        start: {
          line: location().start.line,
          column: location().start.column
        },
        end: {
          line: location().end.line,
          column: location().end.column
        }
      },
      name: param
    };
  }
  function peg$f27(head, param) {    return param;  }
  function peg$f28(head, tail) {
    const args = [head];

    for (const param of tail) {
      args.push(param);
    }
    
    return args;
  }
  function peg$f29(name) {
    const start = location().start.offset;
    const end = location().end.offset;
    const loc = {
      start: {
        line: location().start.line,
        column: location().start.column
      },
      end: {
        line: location().end.line,
        column: location().end.column
      }
    };

    return {
      type: 'Identifier',
      start,
      end,
      loc,
      name
    };
  }
  function peg$f30(name, args) {
    return {
      type: "FunctionCall",
      start: location().start.offset,
      end: location().end.offset,
      callee: name,
      arguments: args || []
    };
  }
  function peg$f31(name) {
    error(`Unclosed parentheses in ${name.name}() call`);
  }
  function peg$f32(name) {
    error(`Missing parentheses after ${name.name}. Expected ${name.name}(...)`);
  }
  function peg$f33(left, operator, right) {
    return {
      type: 'AssignmentExpression',
      operator: operator,
      left: left,
      right: right,
      start: left.start,
      end: right.end
    };
  }
  function peg$f34() {    return [];  }
  function peg$f35(params) {    return params || [];  }
  function peg$f36(param) {    return [param];  }
  function peg$f37(head, tail) {
    return [head, ...tail.map(t => t[3])];
  }
  function peg$f38(params, body) {
    return createArrowFunction(params, body);
  }
  function peg$f39(arrowExpr) {
    return {
      type: "MustacheAttribute",
      start: location().start.offset,
      end: location().end.offset,
      expression: arrowExpr
    };
  }
  function peg$f40(statements) {
    return {
      type: "BlockStatement",
      body: statements
    };
  }
  function peg$f41(expression) {
    return {
      type: "ExpressionStatement",
      expression: expression
    };
  }
  function peg$f42(params, Identifier, parameters) {
    return {
      type: "IIFE",
      start: location().start.offset + 1,
      end: location().end.offset - 1,
      loc: {
        start: {
          line: location().start.line,
          column: location().start.column + 1
        },
        end: {
          line: location().end.line,
          column: location().end.column - 1
        }
      },
      params: params || [],
      identifier: Identifier,
      parameters: parameters || [],
      arguments: [] // no arguments for IIFE call
    };
  }
  function peg$f43(parts) {
    const flattened = parts.flat().filter(x => x !== null && x !== undefined);

    if (flattened.length === 1 && flattened[0].type !== 'Fragment') {
      return flattened[0];
    }
    if (flattened.length === 0) {
        return null;
    }

    const start = flattened[0]?.start !== undefined ? flattened[0].start : location().start.offset;
    const end = flattened[flattened.length - 1]?.end !== undefined ? flattened[flattened.length - 1].end : location().end.offset;

    return {
      type: 'Fragment',
      children: flattened,
      start: start,
      end: end
    };
  }
  function peg$f44(startToken, test, consequent, elsePart) {
    const contentNode = consequent.length > 0 
      ? consequent 
      : [createNode('BlockStatement', location().start, location().end, { body: [] })];

    const alternateNode = elsePart 
      ? (elsePart[3].length > 0 
          ? elsePart[3] 
          : [createNode('BlockStatement', location().start, location().end, { body: [] })])
      : null;

    return createIfStatement(test, contentNode, alternateNode, startToken);
  }
  function peg$f45(contents) {
    // Flatten and filter valid nodes
    const flattened = contents.flat().filter(x =>
     x && (x.type || (typeof x === 'object' && Object.keys(x).length > 0))
    );
    return flattened;
  }
  function peg$f46(content) {
    return content;
  }
  function peg$f47(parts) {    // Changed to ConsequentContentBlock
         const validParts = parts.flatMap(part =>
           Array.isArray(part) ? part : [part]
         ).filter(part =>
           part && (part.type !== 'TextNode' || part.value.trim().length > 0)
         );

         if (validParts.length === 1) return validParts[0];
         return createMixedContentNode(validParts);
  }
  function peg$f48(text) {    // Removed leading/trailing _ (optional whitespace) as the content itself can include space.
                             // The surrounding rules like `InnerContent` will handle optional whitespace between *elements*.
         // Only return null if the text is empty after being captured.
         // We want to preserve spaces, so we only trim if we're checking for *actual* content
         if (text.length === 0) return null; // Or handle empty strings if you want to keep them.

         return {
           type: 'TextNode',
           value: text, // Removed .trim()
           raw: text, // Add a raw value
           start: location().start,
           end: location().end
         };
  }
  function peg$f49(expr) {    // Removed leading and trailing `_`
         return {
           type: 'MustacheTag',
           expression: expr,
           start: location().start,
           end: location().end
         };
  }
  function peg$f50(test, consequent, alternate) {
    return createConditionalExpression(test, consequent, alternate);
  }
  function peg$f51(left, right) {    return createBinaryExpression(left, "||", right);  }
  function peg$f52(left, right) {    return createBinaryExpression(left, "??", right);  }
  function peg$f53(left, right) {    return createBinaryExpression(left, "&&", right);  }
  function peg$f54(left, op, right) {
    return createBinaryExpression(left, op, right);
  }
  function peg$f55(left, op, right) {    return createBinaryExpression(left, op, right);  }
  function peg$f56(left, op, right) {    return createBinaryExpression(left, op, right);  }
  function peg$f57(left, op, right) {    return createBinaryExpression(left, op, right);  }
  function peg$f58(left, op, right) {
    return createBinaryExpression(left, op, right);
  }
  function peg$f59(operator, argument) {    // <-- Change to LeftHandSideExpression
         return createUpdateExpression(operator, argument, true, location().start.offset, argument.end);
  }
  function peg$f60(argument, operator) {    // <-- Change to LeftHandSideExpression
         return createUpdateExpression(operator, argument, false, argument.start, location().end.offset);
  }
  function peg$f61() {    return expr;  }
  function peg$f62(expr) {    return expr;  }
  function peg$f63(callee, args) {
    return createCallExpression(callee, args || []);
  }
  function peg$f64(head, tail) {
    return tail.reduce((acc, part) => {
      if (part[1] === '[') {
        // Array access
        return {
          type: 'MemberExpression',
          object: acc,
          property: part[2],
          computed: true,
          optional: false
        };
      } else if (part[1] === '?.') {
        // Optional chaining
        return {
          type: 'MemberExpression',
          object: acc,
          property: part[2],
          computed: false,
          optional: true
        };
      } else {
        // Regular property access
        return {
          type: 'MemberExpression',
          object: acc,
          property: part[2],
          computed: false,
          optional: false
        };
      }
    }, head);
  }
  function peg$f65(op, argument) {    // <-- Often PrimaryExpression is sufficient
         return createUnaryExpression(op, argument, location().start.offset, argument.end);
  }
  function peg$f66(head, tail) {
    return [head, ...tail.map(t => t[3])];
  }
  function peg$f67(value) {
    return createNode('Literal', location().start, location().end, {
      value: parseInt(value, 10),
      raw: value
    });
  }
  function peg$f68(elements) {
    const items = elements
      ? [elements[0], ...elements[1].map(e => e[3])]
      : [];
    return {
      type: "ArrayExpression",
      elements: items,
      start: location().start,
      end: location().end
    };
  }
  function peg$f69(pairs) {
    const properties = pairs
      ? [pairs[0], ...pairs[1].map(p => p[3])]
      : [];
    return {
      type: "ObjectExpression",
      properties,
      start: location().start,
      end: location().end
    };
  }
  function peg$f70(key, value) {
    return {
      type: "Property",
      key,
      value
    };
  }
  function peg$f71(chars) {    // Add action block here
         return createNode('Literal', location().start, location().end, {
           value: chars,
           raw: text() // `text()` will capture the matched string including quotes
         });
  }
  function peg$f72(chars) {
    return createNode('Literal', location().start, location().end, {
      value: chars,
      raw: text()
    });
  }
  function peg$f73() {    
         return createNode('Literal', location().start, location().end, {
           value: true,
           raw: "true"
         });
  }
  function peg$f74() {
    return createNode('Literal', location().start, location().end, {
      value: false,
      raw: "false"
    });
  }
  function peg$f75() {
    return createNode('Literal', location().start, location().end, {
      value: null,
      raw: "null"
    });
  }
  function peg$f76() {
    return createNode('Literal', location().start, location().end, {
      value: undefined,
      raw: "undefined"
    });
  }
  function peg$f77(name) {
    return createNode('Identifier', location().start, location().end, { 
      name: name 
    });
  }
  function peg$f78(head, prop) {    return prop;  }
  function peg$f79(head, tail) {
    return tail.reduce((acc, property) => {
      return createMemberExpression(acc, property);
    }, head);
  }
  function peg$f80(head) {    return head;  }
  function peg$f81(parts) {
    return createMixedContentNode(parts);
  }
  function peg$f82(startToken, iterable, body) {
    return createEachStatement(iterable, body, startToken);
  }
  function peg$f83(source, item, keyPart) {
    const key = keyPart ? (keyPart[0] ? keyPart[1] : keyPart[0]) : null; // Handle both formats
    return {
      source,
      item,
      key
    };
  }
  let peg$currPos = options.peg$currPos | 0;
  let peg$savedPos = peg$currPos;
  const peg$posDetailsCache = [{ line: 1, column: 1 }];
  let peg$maxFailPos = peg$currPos;
  let peg$maxFailExpected = options.peg$maxFailExpected || [];
  let peg$silentFails = options.peg$silentFails | 0;

  let peg$result;

  if (options.startRule) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos,
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$getUnicode(pos = peg$currPos) {
    const cp = input.codePointAt(pos);
    if (cp === undefined) {
      return "";
    }
    return String.fromCodePoint(cp);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text, ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase, unicode) {
    return { type: "class", parts, inverted, ignoreCase, unicode };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description };
  }

  function peg$computePosDetails(pos) {
    let details = peg$posDetailsCache[pos];
    let p;

    if (details) {
      return details;
    } else {
      if (pos >= peg$posDetailsCache.length) {
        p = peg$posDetailsCache.length - 1;
      } else {
        p = pos;
        while (!peg$posDetailsCache[--p]) {}
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column,
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    const startPosDetails = peg$computePosDetails(startPos);
    const endPosDetails = peg$computePosDetails(endPos);

    const res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column,
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column,
      },
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsestart() {
    let s0;

    s0 = peg$parseHTML();

    return s0;
  }

  function peg$parse_() {
    let s0, s1;

    peg$silentFails++;
    s0 = [];
    s1 = input.charAt(peg$currPos);
    if (peg$r0.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = input.charAt(peg$currPos);
      if (peg$r0.test(s1)) {
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }
    }
    peg$silentFails--;

    return s0;
  }

  function peg$parse__() {
    let s0, s1;

    peg$silentFails++;
    s0 = [];
    s1 = input.charAt(peg$currPos);
    if (peg$r0.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = input.charAt(peg$currPos);
        if (peg$r0.test(s1)) {
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e0); }
        }
      }
    } else {
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }

    return s0;
  }

  function peg$parseTextNode() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    s3 = peg$currPos;
    peg$silentFails++;
    if (input.substr(peg$currPos, 4) === peg$c0) {
      s4 = peg$c0;
      peg$currPos += 4;
    } else {
      s4 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e2); }
    }
    if (s4 === peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c1) {
        s4 = peg$c1;
        peg$currPos += 6;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
      if (s4 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c2) {
          s4 = peg$c2;
          peg$currPos += 5;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
        if (s4 === peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c3) {
            s4 = peg$c3;
            peg$currPos += 6;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e5); }
          }
          if (s4 === peg$FAILED) {
            if (input.substr(peg$currPos, 8) === peg$c4) {
              s4 = peg$c4;
              peg$currPos += 8;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e6); }
            }
            if (s4 === peg$FAILED) {
              s4 = input.charAt(peg$currPos);
              if (peg$r1.test(s4)) {
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e7); }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s4 === peg$FAILED) {
      s3 = undefined;
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      s4 = [];
      s5 = input.charAt(peg$currPos);
      if (peg$r2.test(s5)) {
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e8); }
      }
      if (s5 !== peg$FAILED) {
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = input.charAt(peg$currPos);
          if (peg$r2.test(s5)) {
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e8); }
          }
        }
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f0(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseTextContent() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = input.charAt(peg$currPos);
    if (peg$r3.test(s3)) {
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e9); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r3.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e9); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f1(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCommentBlock() {
    let s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c5) {
      s1 = peg$c5;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = peg$currPos;
      s5 = peg$currPos;
      peg$silentFails++;
      if (input.substr(peg$currPos, 3) === peg$c6) {
        s6 = peg$c6;
        peg$currPos += 3;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e11); }
      }
      peg$silentFails--;
      if (s6 === peg$FAILED) {
        s5 = undefined;
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      if (s5 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s6 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e12); }
        }
        if (s6 !== peg$FAILED) {
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 3) === peg$c6) {
          s6 = peg$c6;
          peg$currPos += 3;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e11); }
        }
        peg$silentFails--;
        if (s6 === peg$FAILED) {
          s5 = undefined;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e12); }
          }
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      s2 = input.substring(s2, peg$currPos);
      if (input.substr(peg$currPos, 3) === peg$c6) {
        s3 = peg$c6;
        peg$currPos += 3;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e11); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f2(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseHTML() {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseFragment();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f3(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseFragment() {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseLogicBlock();
    if (s2 === peg$FAILED) {
      s2 = peg$parseRawPreBlock();
      if (s2 === peg$FAILED) {
        s2 = peg$parseRawCodeBlock();
        if (s2 === peg$FAILED) {
          s2 = peg$parseOpenCloseTags();
          if (s2 === peg$FAILED) {
            s2 = peg$parseSelfClosingTags();
            if (s2 === peg$FAILED) {
              s2 = peg$parseMustacheTag();
              if (s2 === peg$FAILED) {
                s2 = peg$parseCommentBlock();
                if (s2 === peg$FAILED) {
                  s2 = peg$parseTextNode();
                }
              }
            }
          }
        }
      }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseLogicBlock();
        if (s2 === peg$FAILED) {
          s2 = peg$parseRawPreBlock();
          if (s2 === peg$FAILED) {
            s2 = peg$parseRawCodeBlock();
            if (s2 === peg$FAILED) {
              s2 = peg$parseOpenCloseTags();
              if (s2 === peg$FAILED) {
                s2 = peg$parseSelfClosingTags();
                if (s2 === peg$FAILED) {
                  s2 = peg$parseMustacheTag();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parseCommentBlock();
                    if (s2 === peg$FAILED) {
                      s2 = peg$parseTextNode();
                    }
                  }
                }
              }
            }
          }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f4(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseOpenCloseTags() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseRawPreBlock();
    if (s2 === peg$FAILED) {
      s2 = peg$parseRawCodeBlock();
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f5(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse_();
      s2 = peg$parseOpenTag();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s4 = peg$parseInnerContent();
        s5 = peg$parse_();
        s6 = peg$parseCloseTag();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f6(s2, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseSelfClosingTags() {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseSelfClosingTag();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f7(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseOpenTag() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 60) {
      s2 = peg$c7;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e13); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parseTagName();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseAttributes();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 62) {
          s7 = peg$c8;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e14); }
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f8(s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCloseTag() {
    let s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 2) === peg$c9) {
      s2 = peg$c9;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e15); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parseTagName();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 62) {
          s5 = peg$c8;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e14); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f9(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSelfClosingTag() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 60) {
      s2 = peg$c7;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e13); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parseTagName();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseAttributes();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parse_();
        if (input.substr(peg$currPos, 2) === peg$c10) {
          s7 = peg$c10;
          peg$currPos += 2;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e16); }
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f10(s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTagName() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = input.charAt(peg$currPos);
    if (peg$r4.test(s3)) {
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e17); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r4.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e17); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f11(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseRawPreBlock() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 60) {
      s1 = peg$c7;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e13); }
    }
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c11) {
        s2 = peg$c11;
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e19); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s4 = peg$parseAttributes();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 62) {
          s6 = peg$c8;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e14); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$currPos;
          s8 = [];
          s9 = peg$currPos;
          s10 = peg$currPos;
          peg$silentFails++;
          if (input.substr(peg$currPos, 6) === peg$c12) {
            s11 = peg$c12;
            peg$currPos += 6;
          } else {
            s11 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e20); }
          }
          peg$silentFails--;
          if (s11 === peg$FAILED) {
            s10 = undefined;
          } else {
            peg$currPos = s10;
            s10 = peg$FAILED;
          }
          if (s10 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s11 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e12); }
            }
            if (s11 !== peg$FAILED) {
              s10 = [s10, s11];
              s9 = s10;
            } else {
              peg$currPos = s9;
              s9 = peg$FAILED;
            }
          } else {
            peg$currPos = s9;
            s9 = peg$FAILED;
          }
          while (s9 !== peg$FAILED) {
            s8.push(s9);
            s9 = peg$currPos;
            s10 = peg$currPos;
            peg$silentFails++;
            if (input.substr(peg$currPos, 6) === peg$c12) {
              s11 = peg$c12;
              peg$currPos += 6;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e20); }
            }
            peg$silentFails--;
            if (s11 === peg$FAILED) {
              s10 = undefined;
            } else {
              peg$currPos = s10;
              s10 = peg$FAILED;
            }
            if (s10 !== peg$FAILED) {
              if (input.length > peg$currPos) {
                s11 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e12); }
              }
              if (s11 !== peg$FAILED) {
                s10 = [s10, s11];
                s9 = s10;
              } else {
                peg$currPos = s9;
                s9 = peg$FAILED;
              }
            } else {
              peg$currPos = s9;
              s9 = peg$FAILED;
            }
          }
          s7 = input.substring(s7, peg$currPos);
          if (input.substr(peg$currPos, 6) === peg$c12) {
            s8 = peg$c12;
            peg$currPos += 6;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e20); }
          }
          if (s8 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f12(s4, s7);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e18); }
    }

    return s0;
  }

  function peg$parseRawCodeBlock() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 60) {
      s1 = peg$c7;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e13); }
    }
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c13) {
        s2 = peg$c13;
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e22); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s4 = peg$parseAttributes();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 62) {
          s6 = peg$c8;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e14); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$currPos;
          s8 = [];
          s9 = peg$currPos;
          s10 = peg$currPos;
          peg$silentFails++;
          if (input.substr(peg$currPos, 7) === peg$c14) {
            s11 = peg$c14;
            peg$currPos += 7;
          } else {
            s11 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e23); }
          }
          peg$silentFails--;
          if (s11 === peg$FAILED) {
            s10 = undefined;
          } else {
            peg$currPos = s10;
            s10 = peg$FAILED;
          }
          if (s10 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s11 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e12); }
            }
            if (s11 !== peg$FAILED) {
              s10 = [s10, s11];
              s9 = s10;
            } else {
              peg$currPos = s9;
              s9 = peg$FAILED;
            }
          } else {
            peg$currPos = s9;
            s9 = peg$FAILED;
          }
          while (s9 !== peg$FAILED) {
            s8.push(s9);
            s9 = peg$currPos;
            s10 = peg$currPos;
            peg$silentFails++;
            if (input.substr(peg$currPos, 7) === peg$c14) {
              s11 = peg$c14;
              peg$currPos += 7;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e23); }
            }
            peg$silentFails--;
            if (s11 === peg$FAILED) {
              s10 = undefined;
            } else {
              peg$currPos = s10;
              s10 = peg$FAILED;
            }
            if (s10 !== peg$FAILED) {
              if (input.length > peg$currPos) {
                s11 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e12); }
              }
              if (s11 !== peg$FAILED) {
                s10 = [s10, s11];
                s9 = s10;
              } else {
                peg$currPos = s9;
                s9 = peg$FAILED;
              }
            } else {
              peg$currPos = s9;
              s9 = peg$FAILED;
            }
          }
          s7 = input.substring(s7, peg$currPos);
          if (input.substr(peg$currPos, 7) === peg$c14) {
            s8 = peg$c14;
            peg$currPos += 7;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e23); }
          }
          if (s8 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f13(s4, s7);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }

    return s0;
  }

  function peg$parseAttributes() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseBasicHtmlAttribute();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      s5 = peg$parseBasicHtmlAttribute();
      if (s5 !== peg$FAILED) {
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        s5 = peg$parseBasicHtmlAttribute();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f14(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBasicHtmlAttribute() {
    let s0;

    s0 = peg$parseEventHandler();
    if (s0 === peg$FAILED) {
      s0 = peg$parseTwoWayBindingAttribute();
      if (s0 === peg$FAILED) {
        s0 = peg$parseMustacheAttribute();
        if (s0 === peg$FAILED) {
          s0 = peg$parseKeyValueAttribute();
          if (s0 === peg$FAILED) {
            s0 = peg$parseBooleanIdentifierAttribute();
            if (s0 === peg$FAILED) {
              s0 = peg$parseBooleanAttribute();
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseEventHandler() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseSemantqAttributeName();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 61) {
        s4 = peg$c15;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e24); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parseEventHandlerValue();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f15(s2, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEventHandlerValue() {
    let s0;

    s0 = peg$parseArrowFunctionAttributeValue();
    if (s0 === peg$FAILED) {
      s0 = peg$parseMustacheAttributeValue();
    }

    return s0;
  }

  function peg$parseTwoWayBindingAttribute() {
    let s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c16) {
      s1 = peg$c16;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e26); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseExtendedIdentifier();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 61) {
          s4 = peg$c15;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e24); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          s6 = peg$parseAttributeValue();
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f16(s2, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e25); }
    }

    return s0;
  }

  function peg$parseMustacheAttribute() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseAttributeName();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 61) {
        s4 = peg$c15;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e24); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 123) {
          s6 = peg$c17;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e27); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s8 = peg$parseFullJSExpression();
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 125) {
              s10 = peg$c18;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e28); }
            }
            if (s10 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f17(s2, s8);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseKeyValueAttribute() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseAttributeName();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 61) {
        s4 = peg$c15;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e24); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parseRegularAttributeValue();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f18(s2, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBooleanIdentifierAttribute() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 123) {
      s2 = peg$c17;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e27); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseIdentifier();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 125) {
          s6 = peg$c18;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e28); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f19(s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBooleanAttribute() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseIdentifier();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f20(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAttributeName() {
    let s0;

    s0 = peg$parseExtendedIdentifier();
    if (s0 === peg$FAILED) {
      s0 = peg$parseSemantqAttributeName();
    }

    return s0;
  }

  function peg$parseExtendedIdentifier() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    s3 = input.charAt(peg$currPos);
    if (peg$r5.test(s3)) {
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e29); }
    }
    if (s3 !== peg$FAILED) {
      s4 = [];
      s5 = input.charAt(peg$currPos);
      if (peg$r6.test(s5)) {
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e30); }
      }
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = input.charAt(peg$currPos);
        if (peg$r6.test(s5)) {
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e30); }
        }
      }
      s3 = [s3, s4];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f21(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSemantqAttributeName() {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 64) {
      s1 = peg$c19;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e31); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = input.charAt(peg$currPos);
      if (peg$r7.test(s4)) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e32); }
      }
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = input.charAt(peg$currPos);
          if (peg$r7.test(s4)) {
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e32); }
          }
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f22(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAttributeValue() {
    let s0;

    s0 = peg$parseIIFE();
    if (s0 === peg$FAILED) {
      s0 = peg$parseArrowFunctionAttributeValue();
      if (s0 === peg$FAILED) {
        s0 = peg$parseMustacheAttributeValueWithParams();
        if (s0 === peg$FAILED) {
          s0 = peg$parseMustacheAttributeValue();
          if (s0 === peg$FAILED) {
            s0 = peg$parseRegularAttributeValue();
            if (s0 === peg$FAILED) {
              s0 = peg$parseRegularFunctionalCall();
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseMustacheAttributeValue() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c17;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e27); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseFullJSExpression();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 125) {
          s5 = peg$c18;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e28); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f23(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRegularAttributeValue() {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c20;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e33); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = input.charAt(peg$currPos);
      if (peg$r8.test(s4)) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e34); }
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = input.charAt(peg$currPos);
        if (peg$r8.test(s4)) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e34); }
        }
      }
      s2 = input.substring(s2, peg$currPos);
      if (input.charCodeAt(peg$currPos) === 34) {
        s3 = peg$c20;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e33); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f24(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMustacheAttributeValueWithParams() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c17;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e27); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseIdentifier();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 40) {
          s5 = peg$c21;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e35); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseArguments();
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          s8 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s9 = peg$c22;
            peg$currPos++;
          } else {
            s9 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e36); }
          }
          if (s9 !== peg$FAILED) {
            s10 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 125) {
              s11 = peg$c18;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e28); }
            }
            if (s11 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f25(s3, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseArguments() {
    let s0;

    s0 = peg$parseMultipleArguments();
    if (s0 === peg$FAILED) {
      s0 = peg$parseSingleArgument();
    }

    return s0;
  }

  function peg$parseSingleArgument() {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseIdentifier();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f26(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseMultipleArguments() {
    let s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseParamIdentifier();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 44) {
        s4 = peg$c23;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e37); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parseParamIdentifier();
        if (s6 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f27(s1, s6);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s4 = peg$c23;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e37); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          s6 = peg$parseParamIdentifier();
          if (s6 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f27(s1, s6);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f28(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseParamIdentifier() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    s3 = input.charAt(peg$currPos);
    if (peg$r5.test(s3)) {
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e29); }
    }
    if (s3 !== peg$FAILED) {
      s4 = [];
      s5 = input.charAt(peg$currPos);
      if (peg$r9.test(s5)) {
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e38); }
      }
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = input.charAt(peg$currPos);
        if (peg$r9.test(s5)) {
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e38); }
        }
      }
      s3 = [s3, s4];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f29(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseRegularFunctionalCall() {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseIdentifier();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c21;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e35); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseMultipleArguments();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (input.charCodeAt(peg$currPos) === 41) {
          s4 = peg$c22;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e36); }
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f30(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseIdentifier();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c21;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e35); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f31(s1);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseIdentifier();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f32(s1);
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parseArrowFunctionBody() {
    let s0;

    s0 = peg$parseBlockStatement();
    if (s0 === peg$FAILED) {
      s0 = peg$parseAssignmentExpression();
      if (s0 === peg$FAILED) {
        s0 = peg$parseFullJSExpression();
      }
    }

    return s0;
  }

  function peg$parseAssignmentExpression() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseLeftHandSideExpression();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseAssignmentOperator();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseAssignmentExpression();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f33(s1, s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseUpdateExpression();
    }

    return s0;
  }

  function peg$parseAssignmentOperator() {
    let s0;

    if (input.charCodeAt(peg$currPos) === 61) {
      s0 = peg$c15;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e24); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c24) {
        s0 = peg$c24;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e39); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c25) {
          s0 = peg$c25;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e40); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c26) {
            s0 = peg$c26;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e41); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c27) {
              s0 = peg$c27;
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e42); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c28) {
                s0 = peg$c28;
                peg$currPos += 2;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e43); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 3) === peg$c29) {
                  s0 = peg$c29;
                  peg$currPos += 3;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e44); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 3) === peg$c30) {
                    s0 = peg$c30;
                    peg$currPos += 3;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e45); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 4) === peg$c31) {
                      s0 = peg$c31;
                      peg$currPos += 4;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e46); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c32) {
                        s0 = peg$c32;
                        peg$currPos += 2;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e47); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c33) {
                          s0 = peg$c33;
                          peg$currPos += 2;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e48); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 2) === peg$c34) {
                            s0 = peg$c34;
                            peg$currPos += 2;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e49); }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseArrowParameters() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c21;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e35); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 41) {
        s3 = peg$c22;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e36); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f34();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c21;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e35); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseParameterList();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 41) {
          s5 = peg$c22;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e36); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f35(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseIdentifier();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f36(s1);
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parseParameterList() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseIdentifier();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c23;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e37); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseIdentifier();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c23;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e37); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseIdentifier();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f37(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseArrowFunction() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseArrowParameters();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c35) {
        s3 = peg$c35;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e50); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseArrowFunctionBody();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f38(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseArrowFunctionAttributeValue() {
    let s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c17;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e27); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseArrowFunction();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 125) {
          s5 = peg$c18;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e28); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f39(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e51); }
    }

    return s0;
  }

  function peg$parseBlockStatement() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c17;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e27); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$parseExpressionStatement();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parseExpressionStatement();
      }
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 125) {
        s5 = peg$c18;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e28); }
      }
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f40(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseExpressionStatement() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseExpression();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 59) {
        s3 = peg$c36;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e52); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f41(s1);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseExpression() {
    let s0;

    s0 = peg$parseCallExpression();
    if (s0 === peg$FAILED) {
      s0 = peg$parseIdentifier();
    }

    return s0;
  }

  function peg$parseIIFE() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c17;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e27); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c21;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e35); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.substr(peg$currPos, 8) === peg$c37) {
          s5 = peg$c37;
          peg$currPos += 8;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e53); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 40) {
            s7 = peg$c21;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e35); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parseMultipleArguments();
            if (s8 === peg$FAILED) {
              s8 = null;
            }
            if (input.charCodeAt(peg$currPos) === 41) {
              s9 = peg$c22;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e36); }
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 123) {
                s11 = peg$c17;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e27); }
              }
              if (s11 !== peg$FAILED) {
                s12 = peg$parse_();
                s13 = peg$parseIdentifier();
                if (s13 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 40) {
                    s14 = peg$c21;
                    peg$currPos++;
                  } else {
                    s14 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e35); }
                  }
                  if (s14 !== peg$FAILED) {
                    s15 = peg$parse_();
                    s16 = peg$parseMultipleArguments();
                    if (s16 === peg$FAILED) {
                      s16 = null;
                    }
                    s17 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s18 = peg$c22;
                      peg$currPos++;
                    } else {
                      s18 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e36); }
                    }
                    if (s18 !== peg$FAILED) {
                      s19 = peg$parse_();
                      if (input.charCodeAt(peg$currPos) === 125) {
                        s20 = peg$c18;
                        peg$currPos++;
                      } else {
                        s20 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e28); }
                      }
                      if (s20 !== peg$FAILED) {
                        s21 = peg$parse_();
                        if (input.charCodeAt(peg$currPos) === 41) {
                          s22 = peg$c22;
                          peg$currPos++;
                        } else {
                          s22 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e36); }
                        }
                        if (s22 !== peg$FAILED) {
                          s23 = peg$parse_();
                          if (input.charCodeAt(peg$currPos) === 40) {
                            s24 = peg$c21;
                            peg$currPos++;
                          } else {
                            s24 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e35); }
                          }
                          if (s24 !== peg$FAILED) {
                            s25 = peg$parse_();
                            if (input.charCodeAt(peg$currPos) === 41) {
                              s26 = peg$c22;
                              peg$currPos++;
                            } else {
                              s26 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e36); }
                            }
                            if (s26 !== peg$FAILED) {
                              s27 = peg$parse_();
                              if (input.charCodeAt(peg$currPos) === 125) {
                                s28 = peg$c18;
                                peg$currPos++;
                              } else {
                                s28 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e28); }
                              }
                              if (s28 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s0 = peg$f42(s8, s13, s16);
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseInnerContent() {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseHtmlTagWithExpressions();
    if (s2 === peg$FAILED) {
      s2 = peg$parseLogicBlock();
      if (s2 === peg$FAILED) {
        s2 = peg$parseTextWithExpressions();
        if (s2 === peg$FAILED) {
          s2 = peg$parseCommentBlock();
          if (s2 === peg$FAILED) {
            s2 = peg$parseTextNode();
          }
        }
      }
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseHtmlTagWithExpressions();
      if (s2 === peg$FAILED) {
        s2 = peg$parseLogicBlock();
        if (s2 === peg$FAILED) {
          s2 = peg$parseTextWithExpressions();
          if (s2 === peg$FAILED) {
            s2 = peg$parseCommentBlock();
            if (s2 === peg$FAILED) {
              s2 = peg$parseTextNode();
            }
          }
        }
      }
    }
    peg$savedPos = s0;
    s1 = peg$f43(s1);
    s0 = s1;

    return s0;
  }

  function peg$parseLogicBlock() {
    let s0;

    s0 = peg$parseEachStatement();
    if (s0 === peg$FAILED) {
      s0 = peg$parseIfStatement();
    }

    return s0;
  }

  function peg$parseIfStatement() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 3) === peg$c38) {
      s2 = peg$c38;
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e54); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s4 = peg$c21;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e35); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parseCondition();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s8 = peg$c22;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e36); }
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            s10 = peg$parseContentBody();
            s11 = peg$currPos;
            s12 = peg$parse_();
            if (input.substr(peg$currPos, 5) === peg$c2) {
              s13 = peg$c2;
              peg$currPos += 5;
            } else {
              s13 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e4); }
            }
            if (s13 !== peg$FAILED) {
              s14 = peg$parse_();
              s15 = peg$parseContentBody();
              s12 = [s12, s13, s14, s15];
              s11 = s12;
            } else {
              peg$currPos = s11;
              s11 = peg$FAILED;
            }
            if (s11 === peg$FAILED) {
              s11 = null;
            }
            if (input.substr(peg$currPos, 6) === peg$c3) {
              s12 = peg$c3;
              peg$currPos += 6;
            } else {
              s12 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e5); }
            }
            if (s12 !== peg$FAILED) {
              s13 = peg$parse_();
              peg$savedPos = s0;
              s0 = peg$f44(s2, s6, s10, s11);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseContentBody() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = [];
    s3 = peg$currPos;
    s4 = peg$currPos;
    peg$silentFails++;
    if (input.substr(peg$currPos, 5) === peg$c2) {
      s5 = peg$c2;
      peg$currPos += 5;
    } else {
      s5 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }
    if (s5 === peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c3) {
        s5 = peg$c3;
        peg$currPos += 6;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
      if (s5 === peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c4) {
          s5 = peg$c4;
          peg$currPos += 8;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e6); }
        }
      }
    }
    peg$silentFails--;
    if (s5 === peg$FAILED) {
      s4 = undefined;
    } else {
      peg$currPos = s4;
      s4 = peg$FAILED;
    }
    if (s4 !== peg$FAILED) {
      s5 = peg$parseContentLine();
      if (s5 !== peg$FAILED) {
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    if (s3 === peg$FAILED) {
      s3 = peg$parse__();
    }
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$silentFails++;
      if (input.substr(peg$currPos, 5) === peg$c2) {
        s5 = peg$c2;
        peg$currPos += 5;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s5 === peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c3) {
          s5 = peg$c3;
          peg$currPos += 6;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e5); }
        }
        if (s5 === peg$FAILED) {
          if (input.substr(peg$currPos, 8) === peg$c4) {
            s5 = peg$c4;
            peg$currPos += 8;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e6); }
          }
        }
      }
      peg$silentFails--;
      if (s5 === peg$FAILED) {
        s4 = undefined;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parseContentLine();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = peg$parse__();
      }
    }
    s3 = peg$parse_();
    peg$savedPos = s0;
    s0 = peg$f45(s2);

    return s0;
  }

  function peg$parseContentLine() {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseLogicBlock();
    if (s1 === peg$FAILED) {
      s1 = peg$parseOpenCloseTags();
      if (s1 === peg$FAILED) {
        s1 = peg$parseSelfClosingTags();
        if (s1 === peg$FAILED) {
          s1 = peg$parseMustacheTag();
          if (s1 === peg$FAILED) {
            s1 = peg$parseCommentBlock();
            if (s1 === peg$FAILED) {
              s1 = peg$parseTextContent();
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f46(s1);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseHtmlTagWithExpressions() {
    let s0;

    s0 = peg$parseOpenCloseTags();
    if (s0 === peg$FAILED) {
      s0 = peg$parseSelfClosingTags();
      if (s0 === peg$FAILED) {
        s0 = peg$parseTextWithExpressions();
        if (s0 === peg$FAILED) {
          s0 = peg$parseCommentBlock();
        }
      }
    }

    return s0;
  }

  function peg$parseTextWithExpressions() {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseTextPart();
    if (s2 === peg$FAILED) {
      s2 = peg$parseMustacheTag();
      if (s2 === peg$FAILED) {
        s2 = peg$parseConsequentExpression();
        if (s2 === peg$FAILED) {
          s2 = peg$parseCommentBlock();
          if (s2 === peg$FAILED) {
            s2 = peg$parseConsequentContentBlock();
          }
        }
      }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseTextPart();
        if (s2 === peg$FAILED) {
          s2 = peg$parseMustacheTag();
          if (s2 === peg$FAILED) {
            s2 = peg$parseConsequentExpression();
            if (s2 === peg$FAILED) {
              s2 = peg$parseCommentBlock();
              if (s2 === peg$FAILED) {
                s2 = peg$parseConsequentContentBlock();
              }
            }
          }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f47(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseTextPart() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = input.charAt(peg$currPos);
    if (peg$r10.test(s3)) {
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e55); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r10.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e55); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f48(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseMustacheTag() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c17;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e27); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseFullJSExpression();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 125) {
          s5 = peg$c18;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e28); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f49(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTernaryExpression() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parseLogicalORExpression();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 63) {
        s3 = peg$c39;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e56); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseFullJSExpression();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 58) {
            s7 = peg$c40;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e57); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$parseFullJSExpression();
            if (s9 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f50(s1, s5, s9);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLogicalORExpression() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseLogicalNullishExpression();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c41) {
        s3 = peg$c41;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e58); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseLogicalORExpression();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f51(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseLogicalNullishExpression();
    }

    return s0;
  }

  function peg$parseLogicalNullishExpression() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseLogicalANDExpression();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c42) {
        s3 = peg$c42;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e59); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseLogicalNullishExpression();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f52(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseLogicalANDExpression();
    }

    return s0;
  }

  function peg$parseLogicalANDExpression() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseBitwiseExpression();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c43) {
        s3 = peg$c43;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e60); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseLogicalANDExpression();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f53(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseBitwiseExpression();
    }

    return s0;
  }

  function peg$parseBitwiseExpression() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseEqualityExpression();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 3) === peg$c44) {
        s3 = peg$c44;
        peg$currPos += 3;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e61); }
      }
      if (s3 === peg$FAILED) {
        s3 = input.charAt(peg$currPos);
        if (peg$r11.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e62); }
        }
        if (s3 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c45) {
            s3 = peg$c45;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e63); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c46) {
              s3 = peg$c46;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e64); }
            }
          }
        }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseBitwiseExpression();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f54(s1, s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseEqualityExpression();
    }

    return s0;
  }

  function peg$parseEqualityExpression() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseRelationalExpression();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 3) === peg$c47) {
        s3 = peg$c47;
        peg$currPos += 3;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e65); }
      }
      if (s3 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c48) {
          s3 = peg$c48;
          peg$currPos += 3;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e66); }
        }
        if (s3 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c49) {
            s3 = peg$c49;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e67); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c50) {
              s3 = peg$c50;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e68); }
            }
          }
        }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseEqualityExpression();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f55(s1, s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseRelationalExpression();
    }

    return s0;
  }

  function peg$parseRelationalExpression() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseAdditiveExpression();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c51) {
        s3 = peg$c51;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e69); }
      }
      if (s3 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c52) {
          s3 = peg$c52;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e70); }
        }
        if (s3 === peg$FAILED) {
          s3 = input.charAt(peg$currPos);
          if (peg$r12.test(s3)) {
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e71); }
          }
        }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseRelationalExpression();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f56(s1, s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseAdditiveExpression();
    }

    return s0;
  }

  function peg$parseAdditiveExpression() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseMultiplicativeExpression();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = input.charAt(peg$currPos);
      if (peg$r13.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e72); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseAdditiveExpression();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f57(s1, s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseMultiplicativeExpression();
    }

    return s0;
  }

  function peg$parseMultiplicativeExpression() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseLeftHandSideExpression();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = input.charAt(peg$currPos);
      if (peg$r14.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e73); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseMultiplicativeExpression();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f58(s1, s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseLeftHandSideExpression();
    }

    return s0;
  }

  function peg$parseLeftHandSideExpression() {
    let s0;

    s0 = peg$parseUnaryExpression();
    if (s0 === peg$FAILED) {
      s0 = peg$parseCallExpression();
      if (s0 === peg$FAILED) {
        s0 = peg$parseMemberExpression();
        if (s0 === peg$FAILED) {
          s0 = peg$parsePrimaryExpression();
        }
      }
    }

    return s0;
  }

  function peg$parsePrefixUpdateExpression() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c53) {
      s1 = peg$c53;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e74); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c54) {
        s1 = peg$c54;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e75); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseLeftHandSideExpression();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f59(s1, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePostfixUpdateExpression() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseLeftHandSideExpression();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c53) {
        s3 = peg$c53;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e74); }
      }
      if (s3 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c54) {
          s3 = peg$c54;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e75); }
        }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f60(s1, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePrimaryAtom() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$parseIdentifier();
    if (s0 === peg$FAILED) {
      s0 = peg$parseNumericLiteral();
      if (s0 === peg$FAILED) {
        s0 = peg$parseStringLiteral();
        if (s0 === peg$FAILED) {
          s0 = peg$parseLiteral();
          if (s0 === peg$FAILED) {
            s0 = peg$parseArrayLiteral();
            if (s0 === peg$FAILED) {
              s0 = peg$parseObjectLiteral();
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 40) {
                  s1 = peg$c21;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e35); }
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parse_();
                  s3 = peg$parseFullJSExpression();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s5 = peg$c22;
                      peg$currPos++;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e36); }
                    }
                    if (s5 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f61();
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsePrimaryExpression() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$parseArrayLiteral();
    if (s0 === peg$FAILED) {
      s0 = peg$parseObjectLiteral();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 40) {
          s1 = peg$c21;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e35); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parseFullJSExpression();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 41) {
              s5 = peg$c22;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e36); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f62(s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseNumericLiteral();
          if (s0 === peg$FAILED) {
            s0 = peg$parseStringLiteral();
            if (s0 === peg$FAILED) {
              s0 = peg$parseLiteral();
              if (s0 === peg$FAILED) {
                s0 = peg$parseIdentifier();
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseUpdateExpression() {
    let s0;

    s0 = peg$parsePrefixUpdateExpression();
    if (s0 === peg$FAILED) {
      s0 = peg$parsePostfixUpdateExpression();
      if (s0 === peg$FAILED) {
        s0 = peg$parseLeftHandSideExpression();
      }
    }

    return s0;
  }

  function peg$parseCallExpression() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseMemberExpression();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c21;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e35); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseArgumentList();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (input.charCodeAt(peg$currPos) === 41) {
          s5 = peg$c22;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e36); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f63(s1, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMemberExpression() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parsePrimaryAtom();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s4 = peg$c55;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e76); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parseFullJSExpression();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 93) {
            s8 = peg$c56;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e77); }
          }
          if (s8 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7, s8];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s4 = peg$c57;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e78); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          s6 = peg$parseIdentifier();
          if (s6 !== peg$FAILED) {
            s4 = [s4, s5, s6];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c58) {
            s4 = peg$c58;
            peg$currPos += 2;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e79); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            s6 = peg$parseIdentifier();
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 91) {
          s4 = peg$c55;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e76); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          s6 = peg$parseFullJSExpression();
          if (s6 !== peg$FAILED) {
            s7 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 93) {
              s8 = peg$c56;
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e77); }
            }
            if (s8 !== peg$FAILED) {
              s4 = [s4, s5, s6, s7, s8];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 46) {
            s4 = peg$c57;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e78); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            s6 = peg$parseIdentifier();
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c58) {
              s4 = peg$c58;
              peg$currPos += 2;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e79); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              s6 = peg$parseIdentifier();
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          }
        }
      }
      peg$savedPos = s0;
      s0 = peg$f64(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseUnaryExpression() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (peg$r15.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e80); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c59) {
        s1 = peg$c59;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e81); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c60) {
          s1 = peg$c60;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e82); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c61) {
            s1 = peg$c61;
            peg$currPos += 6;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e83); }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsePrimaryExpression();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f65(s1, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseArgumentList() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseFullJSExpression();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c23;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e37); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseFullJSExpression();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c23;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e37); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseFullJSExpression();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f66(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNumericLiteral() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = input.charAt(peg$currPos);
    if (peg$r16.test(s3)) {
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e84); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r16.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e84); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f67(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseArrayLiteral() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c55;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e76); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$currPos;
      s4 = peg$parseFullJSExpression();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$currPos;
        s7 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s8 = peg$c23;
          peg$currPos++;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e37); }
        }
        if (s8 !== peg$FAILED) {
          s9 = peg$parse_();
          s10 = peg$parseFullJSExpression();
          if (s10 !== peg$FAILED) {
            s7 = [s7, s8, s9, s10];
            s6 = s7;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$currPos;
          s7 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 44) {
            s8 = peg$c23;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e37); }
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            s10 = peg$parseFullJSExpression();
            if (s10 !== peg$FAILED) {
              s7 = [s7, s8, s9, s10];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        }
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 93) {
        s5 = peg$c56;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e77); }
      }
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f68(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseObjectLiteral() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c17;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e27); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$currPos;
      s4 = peg$parseObjectPair();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$currPos;
        s7 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s8 = peg$c23;
          peg$currPos++;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e37); }
        }
        if (s8 !== peg$FAILED) {
          s9 = peg$parse_();
          s10 = peg$parseObjectPair();
          if (s10 !== peg$FAILED) {
            s7 = [s7, s8, s9, s10];
            s6 = s7;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$currPos;
          s7 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 44) {
            s8 = peg$c23;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e37); }
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            s10 = peg$parseObjectPair();
            if (s10 !== peg$FAILED) {
              s7 = [s7, s8, s9, s10];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        }
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 125) {
        s5 = peg$c18;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e28); }
      }
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f69(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseObjectPair() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseIdentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c40;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e57); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseFullJSExpression();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f70(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStringLiteral() {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 39) {
      s1 = peg$c62;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e85); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = input.charAt(peg$currPos);
      if (peg$r17.test(s4)) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e86); }
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = input.charAt(peg$currPos);
        if (peg$r17.test(s4)) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e86); }
        }
      }
      s2 = input.substring(s2, peg$currPos);
      if (input.charCodeAt(peg$currPos) === 39) {
        s3 = peg$c62;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e85); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f71(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 34) {
        s1 = peg$c20;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e33); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = [];
        s4 = input.charAt(peg$currPos);
        if (peg$r8.test(s4)) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e34); }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = input.charAt(peg$currPos);
          if (peg$r8.test(s4)) {
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e34); }
          }
        }
        s2 = input.substring(s2, peg$currPos);
        if (input.charCodeAt(peg$currPos) === 34) {
          s3 = peg$c20;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e33); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f72(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseLiteral() {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c63) {
      s1 = peg$c63;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e87); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f73();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c64) {
        s1 = peg$c64;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e88); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f74();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c65) {
          s1 = peg$c65;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e89); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f75();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 9) === peg$c66) {
            s1 = peg$c66;
            peg$currPos += 9;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e90); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f76();
          }
          s0 = s1;
        }
      }
    }

    return s0;
  }

  function peg$parseIdentifier() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    s3 = input.charAt(peg$currPos);
    if (peg$r18.test(s3)) {
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e91); }
    }
    if (s3 !== peg$FAILED) {
      s4 = [];
      s5 = input.charAt(peg$currPos);
      if (peg$r19.test(s5)) {
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e92); }
      }
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = input.charAt(peg$currPos);
        if (peg$r19.test(s5)) {
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e92); }
        }
      }
      s3 = [s3, s4];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f77(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseChainedIdentifier() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseIdentifier();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s4 = peg$c57;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e78); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parseIdentifier();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f78(s1, s5);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s4 = peg$c57;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e78); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseIdentifier();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f78(s1, s5);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f79(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCondition() {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseLogicalORExpression();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f80(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseConsequentContentBlock() {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseMustacheTag();
    if (s2 === peg$FAILED) {
      s2 = peg$parseLogicBlock();
      if (s2 === peg$FAILED) {
        s2 = peg$parseOpenCloseTags();
        if (s2 === peg$FAILED) {
          s2 = peg$parseSelfClosingTags();
          if (s2 === peg$FAILED) {
            s2 = peg$parseTextNode();
            if (s2 === peg$FAILED) {
              s2 = peg$parseCommentBlock();
            }
          }
        }
      }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseMustacheTag();
        if (s2 === peg$FAILED) {
          s2 = peg$parseLogicBlock();
          if (s2 === peg$FAILED) {
            s2 = peg$parseOpenCloseTags();
            if (s2 === peg$FAILED) {
              s2 = peg$parseSelfClosingTags();
              if (s2 === peg$FAILED) {
                s2 = peg$parseTextNode();
                if (s2 === peg$FAILED) {
                  s2 = peg$parseCommentBlock();
                }
              }
            }
          }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f81(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseConsequentExpression() {
    let s0;

    s0 = peg$parseArrowFunction();
    if (s0 === peg$FAILED) {
      s0 = peg$parseTernaryExpression();
      if (s0 === peg$FAILED) {
        s0 = peg$parsePostfixUpdateExpression();
        if (s0 === peg$FAILED) {
          s0 = peg$parseUnaryExpression();
          if (s0 === peg$FAILED) {
            s0 = peg$parseCallExpression();
            if (s0 === peg$FAILED) {
              s0 = peg$parseMemberExpression();
              if (s0 === peg$FAILED) {
                s0 = peg$parseIdentifier();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseLiteral();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseArrayLiteral();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseObjectLiteral();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseLogicalORExpression();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseFullJSExpression() {
    let s0;

    s0 = peg$parseTernaryExpression();
    if (s0 === peg$FAILED) {
      s0 = peg$parseLogicalORExpression();
      if (s0 === peg$FAILED) {
        s0 = peg$parseLogicalNullishExpression();
        if (s0 === peg$FAILED) {
          s0 = peg$parseLogicalANDExpression();
          if (s0 === peg$FAILED) {
            s0 = peg$parseBitwiseExpression();
            if (s0 === peg$FAILED) {
              s0 = peg$parseEqualityExpression();
              if (s0 === peg$FAILED) {
                s0 = peg$parseRelationalExpression();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseAdditiveExpression();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseMultiplicativeExpression();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsePrefixUpdateExpression();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseUnaryExpression();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parsePostfixUpdateExpression();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseUpdateExpression();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseCallExpression();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseMemberExpression();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseArrowFunction();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parsePrimaryExpression();
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseEachStatement() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 5) === peg$c67) {
      s2 = peg$c67;
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e93); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s4 = peg$c21;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e35); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parseEachSource();
        if (s5 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 41) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e36); }
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parse_();
            s8 = peg$parseContentBody();
            if (input.substr(peg$currPos, 8) === peg$c4) {
              s9 = peg$c4;
              peg$currPos += 8;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e6); }
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              peg$savedPos = s0;
              s0 = peg$f82(s2, s5, s8);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEachSource() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parseJSExpression();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c68) {
        s3 = peg$c68;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e94); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseIdentifier();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 40) {
            s8 = peg$c21;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e35); }
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parseJSExpression();
            if (s9 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s10 = peg$c22;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e36); }
              }
              if (s10 !== peg$FAILED) {
                s8 = [s8, s9, s10];
                s7 = s8;
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
          if (s7 === peg$FAILED) {
            s7 = peg$parseJSExpression();
          }
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f83(s1, s5, s7);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseJSExpression() {
    let s0;

    s0 = peg$parseChainedIdentifier();
    if (s0 === peg$FAILED) {
      s0 = peg$parseIdentifier();
      if (s0 === peg$FAILED) {
        s0 = peg$parsePrefixUpdateExpression();
        if (s0 === peg$FAILED) {
          s0 = peg$parseCallExpression();
          if (s0 === peg$FAILED) {
            s0 = peg$parseLiteral();
            if (s0 === peg$FAILED) {
              s0 = peg$parseNumericLiteral();
              if (s0 === peg$FAILED) {
                s0 = peg$parseStringLiteral();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseUnaryExpression();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseTernaryExpression();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseLogicalORExpression();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }



/* GLOBAL GENERIC HELPERS */ 
  
  
 function createNode(type, start, end, additionalProps) {
  const loc = {
    start: {
      line: location().start.line,
      column: location().start.column
    },
    end: {
      line: location().end.line,
      column: location().end.column
    }
  };

  const node = {
    type: type,
    start: start || location().start.offset,
    end: end || location().end.offset,
    loc: loc,
    ...additionalProps
  };

  // Handle MemberExpression case (keep this as it's a specific, valid transformation)
  if (type === 'MemberExpression') {
    // These defaults should only be applied if not already explicitly set in additionalProps
    if (node.computed === undefined) {
      node.computed = false;
    }
    if (node.optional === undefined) {
      node.optional = false;
    }
  }

  // Removed the problematic if (additionalProps.expression) block.
  // Properties like 'expression', 'test', 'consequent', 'alternate', etc.,
  // should already be correctly formed AST nodes by the time they are passed
  // in `additionalProps` from the specific parsing rules.

  return node;
}


function createMemberExpression(object, property) {
  return createNode('MemberExpression', object.start, property.end, {
    object: object,
    property: property
  });
}

function createUpdateExpression(operator, argument, prefix, startOffset, endOffset) {
  return {
    type: "UpdateExpression",
    operator,
    argument,
    prefix,
    start: startOffset, // Use provided startOffset
    end: endOffset      // Use provided endOffset
  };
}

// REVISED HELPER FOR UnaryExpression
function createUnaryExpression(operator, argument, startOffset, endOffset) {
  return createNode('UnaryExpression', startOffset, endOffset, { // Use createNode now
    operator: operator,
    argument: argument,
    prefix: true // Unary operators are always prefix in standard JS AST
  });
}


function createElement(start, end, name, attributes, children) {
  const processedChildren = Array.isArray(children)
    ? children.flat().filter(x => x !== null && x !== undefined)
    : (children ? [children].filter(x => x !== null && x !== undefined) : []);

  return {
    start,
    end,
    type: "Element",
    name,
    attributes: attributes || [],
    children: processedChildren
  };
}

function createSelfClosingElement(start, end, name, attributes) {
  return {
    type: "Element",
    start,
    end,
    name,
    attributes: attributes || []
  };
}

function createMixedContentNode(parts) { // Removed start, end params as they can be derived
  // Filter out null/undefined parts, but NOT whitespace-only Text nodes
  const validParts = parts.filter(part => part !== null && part !== undefined);

  // If there's only one valid part and it's not already a Fragment,
  // return it directly to avoid unnecessary Fragment nesting.
  if (validParts.length === 1 && validParts[0].type !== 'Fragment') {
    return validParts[0];
  }

  // Calculate start and end from the first and last valid parts
  const start = validParts.length > 0 ? validParts[0].start : undefined;
  const end = validParts.length > 0 ? validParts[validParts.length - 1].end : undefined;

  return {
    type: 'Fragment', // Changed from 'MixedContent' to 'Fragment'
    start: start,
    end: end,
    children: validParts
  };
}



/* START IF BLOCK HELPERS */

 
  function createBinaryExpression(left, operator, right) {
    return createNode('BinaryExpression', left.start, right.end, {
      left: left,
      operator: operator,
      right: right
    });
  } 
  
  function createProgram(body, start, end) { 
    return {
      type: "Program",
      start: start,
      end: end,
      body: body,
      sourceType: "module"
    };
  }
  /*
  function createIfStatement(test, consequent, startToken) {
  return createNode('IfStatement', startToken.start, consequent[consequent.length-1].end, {
    test,
    consequent: createNode('BlockStatement', consequent[0].start, consequent[consequent.length-1].end, {
      body: consequent
    }),
    alternate: null
  });
}
  
  */
  
  function createIfStatement(test, consequent, alternate, startToken) {
  const consequentBlock = createNode(
    'BlockStatement',
    consequent[0]?.start ?? startToken.start,
    consequent[consequent.length - 1]?.end ?? startToken.end,
    { body: consequent }
  );

  let alternateBlock = null;

  if (alternate) {
    alternateBlock = createNode(
      'BlockStatement',
      alternate[0]?.start ?? startToken.start,
      alternate[alternate.length - 1]?.end ?? startToken.end,
      { body: alternate }
    );
  }

  return createNode(
    'IfStatement',
    startToken.start,
    (alternateBlock ?? consequentBlock).end,
    {
      test,
      consequent: consequentBlock,
      alternate: alternateBlock
    }
  );
}


function createEachStatement(iterable, body, startToken) {
  return createNode('EachStatement', startToken.start, body[body.length - 1].end, {
    source: iterable.source,
    item: iterable.item,
    key: iterable.key,
    body: createNode(
      'BlockStatement',
      body[0]?.start ?? startToken.start,
      body[body.length - 1]?.end ?? startToken.end,
      { body }
    )
  });
}





function createCallExpression(callee, args) {
  return createNode('CallExpression', callee.start, args[args.length-1]?.end || callee.end, {
    callee: callee,
    arguments: args
  });
}
/* START CONSEQUENT HELPER FUNCTIONS */ 


function createConsequentExpression(expr) { 
  return {
    type: 'ConsequentExpression',
    start: expr.start,
    end: expr.end,
    expression: expr,
    loc: {
      start: expr.loc?.start || expr.start,
      end: expr.loc?.end || expr.end
    }
  };
}




// Add this to your helper functions
function createConditionalExpression(test, consequent, alternate) {
  return createNode('ConditionalExpression', test.start, alternate.end, {
    test,
    consequent,
    alternate
  });
}


function createArrowFunction(params, body) {
  if (!body || !body.type) {
    error('Invalid arrow function body');
  }
  return createNode('ArrowFunctionExpression', 
    params[0]?.start || body.start, // Handle empty params case
    body.end, {
      params: Array.isArray(params) ? params : [],
      body,
      expression: body.type !== 'BlockStatement'
    });
}

// Add this validation helper
function validateArrowParams(params) {
  if (!Array.isArray(params)) {
    error('Arrow function parameters must be an array');
  }
  return params;
}

/* END CONSEQUENT HELPER FUNCTIONS */

/* END IF BLOCK HELPERS */
/// helper functions wrapper 
  
  /* ALL HELPERS WRAPPER */

  peg$result = peg$startRuleFunction();

  const peg$success = (peg$result !== peg$FAILED && peg$currPos === input.length);
  function peg$throw() {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? peg$getUnicode(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
  if (options.peg$library) {
    return /** @type {any} */ ({
      peg$result,
      peg$currPos,
      peg$FAILED,
      peg$maxFailExpected,
      peg$maxFailPos,
      peg$success,
      peg$throw: peg$success ? undefined : peg$throw,
    });
  }
  if (peg$success) {
    return peg$result;
  } else {
    peg$throw();
  }
}

const peg$allowedStartRules = [
  "start"
];

export default {
  StartRules: peg$allowedStartRules,
  SyntaxError: peg$SyntaxError,
  parse: peg$parse
};