import{d as n,f as i}from"./routes-BLb1p8ki.js";class a{constructor(e,o){this.declaredRoutes=e,this.fileBasedRoutes=o,this.basePath=window.location.origin,this.localStorageKey="Semantq.currentRoute"}cleanUrl(e){return e.replace(/build\/routes/g,"")}sanitizeHref(e){return e.replace(/[\s<>'"\x00-\x1F\x7F]/g,"")}isCanonicalRoute(e){try{return new URL(e).origin!==window.location.origin}catch{return!1}}isFileBasedRoute(e){return this.fileBasedRoutes.hasOwnProperty(e)}isDeclaredRoute(e){return this.declaredRoutes.some(o=>o.path===e)}async handleFileBasedRoute(e){const o=this.fileBasedRoutes[e];if(o){console.log(`Navigating to file-based route: ${e} -> ${o}`);const t=new URL(o,this.basePath).href;console.log("Going to:",t),window.location.href=t}else console.error(`File-based route not found: ${e}`),this.handleRouteError(e)}async handleDeclaredRoute(e){const o=this.declaredRoutes.find(s=>s.path===e);if(o){console.log(`Handling declared route: ${e}`);const s=o.filePath;if(s){console.log(`Navigating to declared route: ${e} -> ${s}`);const r=new URL(s,this.basePath).href;console.log("Going to:",r),window.location.href=r}else console.error(`File path not found for declared route: ${e}`),this.handleRouteError(e)}else console.error(`Declared route not found: ${e}`),this.handleRouteError(e)}handleRouteError(e){console.error(`Route ${e} does not exist.`);const o=this.fileBasedRoutes["/404"];o&&(window.location.href=o)}isRouteBeingProcessed(e){return localStorage.getItem(this.localStorageKey)===e}setCurrentRoute(e){localStorage.setItem(this.localStorageKey,e)}clearCurrentRoute(){localStorage.removeItem(this.localStorageKey)}interceptClicks(){document.addEventListener("click",e=>{const o=e.target.closest("a[href]");if(o&&!o.getAttribute("href").startsWith("#")){const s=o.getAttribute("href");if(console.log("Route flow --1",s),console.log("Route flow 0)): raw",s),this.isCanonicalRoute(s)){console.log("Route flow 0: isCanonicalRoute",s),console.log(`Canonical route detected: ${s}. Letting the browser handle it.`);return}e.preventDefault();const t=this.sanitizeHref(s);if(console.log("Route flow 1: isNoTCanonicalRoute",t),this.isRouteBeingProcessed(t)){console.log("Route flow 2: processedAlready",t),console.log(`Route ${t} is already being processed. Skipping.`);return}this.setCurrentRoute(t),this.isDeclaredRoute(t)?(console.log("Route flow 3: isDeclared",t),this.handleDeclaredRoute(t)):this.isFileBasedRoute(t)?(console.log("Route flow 3: isFBased",t),this.handleFileBasedRoute(t)):this.handleRouteError(t)}})}}const l=new a(n,i);l.interceptClicks();window.addEventListener("unload",()=>{l.clearCurrentRoute()});const d={ENV:typeof window<"u"&&window.location.hostname.includes("localhost")?"development":"production",BASE_URLS:{development:"http://localhost:3003/@semantq/auth",production:"https://example.com"},DASHBOARD:"dashboard",get BASE_URL(){return this.BASE_URLS[this.ENV]||this.BASE_URLS.development}};export{d as A,a as R};
