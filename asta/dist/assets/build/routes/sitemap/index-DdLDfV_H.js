import"../../../modulepreload-polyfill-B5Qt9EMX.js";import{d as l,f as a}from"../../../routes-BLb1p8ki.js";class n{constructor(e,o){this.declaredRoutes=e,this.fileBasedRoutes=o,this.basePath=window.location.origin,this.localStorageKey="Semantq.currentRoute"}cleanUrl(e){return e.replace(/build\/routes/g,"")}sanitizeHref(e){return e.replace(/[\s<>'"\x00-\x1F\x7F]/g,"")}isCanonicalRoute(e){try{return new URL(e).origin!==window.location.origin}catch{return!1}}isFileBasedRoute(e){return this.fileBasedRoutes.hasOwnProperty(e)}isDeclaredRoute(e){return this.declaredRoutes.some(o=>o.path===e)}async handleFileBasedRoute(e){const o=this.fileBasedRoutes[e];if(o){console.log(`Navigating to file-based route: ${e} -> ${o}`);let t;o===this.basePath?t=this.basePath:t=this.basePath+"/"+o,console.log("Going to:",t),window.location.href=t}else console.error(`File-based route not found: ${e}`),this.handleRouteError(e)}async handleDeclaredRoute(e){const o=this.declaredRoutes.find(t=>t.path===e);if(o){console.log(`Handling declared route: ${e}`);const t=o.filePath;if(t){console.log(`Navigating to declared route: ${e} -> ${t}`);let s;t===this.basePath?s=this.basePath:s=this.basePath+"/"+t,console.log("Going to:",s),window.location.href=s}else console.error(`File path not found for declared route: ${e}`),this.handleRouteError(e)}else console.error(`Declared route not found: ${e}`),this.handleRouteError(e)}handleRouteError(e){console.error(`Route ${e} does not exist.`);const o=this.fileBasedRoutes["/404"];o&&(window.location.href=o)}isRouteBeingProcessed(e){return localStorage.getItem(this.localStorageKey)===e}setCurrentRoute(e){localStorage.setItem(this.localStorageKey,e)}clearCurrentRoute(){localStorage.removeItem(this.localStorageKey)}interceptClicks(){document.addEventListener("click",e=>{const o=e.target.closest("a[href]");if(o&&!o.getAttribute("href").startsWith("#")){const t=o.getAttribute("href");if(console.log("Route flow --1",t),console.log("Route flow 0)): raw",t),this.isCanonicalRoute(t)){console.log("Route flow 0: isCanonicalRoute",t),console.log(`Canonical route detected: ${t}. Letting the browser handle it.`);return}e.preventDefault();const s=this.sanitizeHref(t);if(console.log("Route flow 1: isNoTCanonicalRoute",s),this.isRouteBeingProcessed(s)){console.log("Route flow 2: processedAlready",s),console.log(`Route ${s} is already being processed. Skipping.`);return}this.setCurrentRoute(s),this.isDeclaredRoute(s)?(console.log("Route flow 3: isDeclared",s),this.handleDeclaredRoute(s)):this.isFileBasedRoute(s)?(console.log("Route flow 3: isFBased",s),this.handleFileBasedRoute(s)):this.handleRouteError(s)}})}}const i=new n(l,a);i.interceptClicks();window.addEventListener("unload",()=>{i.clearCurrentRoute()});async function c(){console.log(n)}async function u(){try{await new Promise(r=>{document.readyState==="loading"?document.addEventListener("DOMContentLoaded",r):r()}),console.log("DOM is ready"),await c()}catch(r){console.error("Error in main function:",r)}}u();
