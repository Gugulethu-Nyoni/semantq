import"../../../modulepreload-polyfill-B5Qt9EMX.js";class l{constructor(e,o){this.declaredRoutes=e,this.fileBasedRoutes=o,this.basePath=window.location.origin,this.localStorageKey="Semantq.currentRoute"}normalizePath(e){return e.replace(/^\/|\/$/g,"")}cleanUrl(e){return e.replace(/build\/routes/g,"")}sanitizeHref(e){return e.replace(this.basePath,"").replace(/[\s<>'"\x00-\x1F\x7F]/g,"")}isCanonicalRoute(e){try{return new URL(e,this.basePath).origin!==this.basePath}catch{return!1}}isFileBasedRoute(e){const o=this.normalizePath(e);return Object.keys(this.fileBasedRoutes).some(s=>this.normalizePath(s)===o)}isDeclaredRoute(e){const o=this.normalizePath(e);return this.declaredRoutes.some(s=>this.normalizePath(s.path)===o)}async handleFileBasedRoute(e){const o=this.normalizePath(e),s=Object.entries(this.fileBasedRoutes).find(([i])=>this.normalizePath(i)===o);if(s){const[i,r]=s;console.log(`Navigating to file-based route: ${i} -> ${r}`);const a=r==="/"?this.basePath:`${this.basePath}/${r}`;console.log("Going to:",a),window.location.href=a}else console.error(`File-based route not found: ${e}`),this.handleRouteError(e)}interceptClicks(){document.addEventListener("click",e=>{const o=e.target.closest("a[href]");if(o&&!o.getAttribute("href").startsWith("#")){const s=o.getAttribute("href");if(this.isCanonicalRoute(s)){console.log(`Canonical route detected: ${s}. Letting the browser handle it.`);return}e.preventDefault();const i=this.sanitizeHref(s);if(this.isRouteBeingProcessed(i)){console.log(`Route ${i} is already being processed. Skipping.`);return}this.setCurrentRoute(i),this.isDeclaredRoute(i)?this.handleDeclaredRoute(i):this.isFileBasedRoute(i)?this.handleFileBasedRoute(i):this.handleRouteError(i)}})}}const n=new l(declaredRoutes,fileBasedRoutes);n.interceptClicks();window.addEventListener("load",()=>{const t=n.sanitizeHref(window.location.pathname);if(n.isRouteBeingProcessed(t)){console.log(`Route ${t} is already being processed. Skipping.`);return}n.setCurrentRoute(t),n.isDeclaredRoute(t)?n.handleDeclaredRoute(t):n.isFileBasedRoute(t)?n.handleFileBasedRoute(t):n.handleRouteError(t)});window.addEventListener("unload",()=>{n.clearCurrentRoute()});async function c(){console.log(l)}async function u(){try{await new Promise(t=>{document.readyState==="loading"?document.addEventListener("DOMContentLoaded",t):t()}),console.log("DOM is ready"),await c()}catch(t){console.error("Error in main function:",t)}}u();
